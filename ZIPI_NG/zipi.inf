! ZIPI v.1.0     (c) 1999 Zak McKraken
! ================================================================
!
! Z-InvisiPistas Interactivas
!
! Esta librería forma parte de la utilidad ZIPI que sirve para crear
! ficheros de InvisiPistas Interactivas a partir de un fichero de
! texto escrito en un lenguaje específico ZTML (Zipi Text Markup
! Lenguage).
!
! La idea está *Muy* inspirada (hasta el punto de que la palabra
! inspirada resulta un eufemismo) en la utilidad SLAG de  Brian 'Beej'
! Hall (c) 1999
!
! Las principales diferencias entre SLAG y ZIPI son las siguientes:
!
! 1) Zipi está en español
! 2) Zipi incorpora menús en "modo texto" (esto permite su ejecución
! en hanhelds, como en la Palm Pilot)
! 3) El lenguaje ZTML es un poco más cómo de usar que el de SLAG,
! puesto que SLAG obligaba a repetir muchas veces los textos
! 4) El código Inform generado por Zipi es un poco más compacto que el
! generado por SLAG, porque SLAG repetía en varios puntos los textos.
! 5) Zipi está programado en Awk, y SLAG lo está en Perl.
!
! Gran parte de las rutinas usadas en este fichero están tomadas de
! SLAG (ligeramente modificadas)
!
Switches d2;
System_file;

Class ZIPI_Menu
	with ZIPI_titulo, ZIPI_item;

Class ZIPI_Pista
	with ZIPI_titulo, ZIPI_pistas;

Class ZIPI_Otro
	with ZIPI_titulo, ZIPI_ejecutar;


Array  ZIPI_buffer    string 120;         ! Buffer para interpretar la
                                     ! línea de entrada principal
Array  ZIPI_parse     string 64;          ! Tabla de parsing correspondiente
Global ZIPI_modo;

ZIPI_Menu Menu_vacio;
ZIPI_Pista Pista_vacia;
ZIPI_Otro Otro_vacio;

!System_file;

[ ZIPI_Espera tecla;
    print "^^[Pulsa una tecla para seguir]";
    @read_char 1 -> tecla;
];

! Esta rutina esta copiada de la utilidad Slag
[ ZIPI_PintaTitulo titulo j;
    @erase_window $ffff;
    @split_window 1;
    @set_window 1;
    @set_cursor 1 1;
    style reverse;
    j = 0->33;
    if (j == 0) j = 80;
    spaces(j);
    @set_cursor 1 2;
    print (string)titulo;
    style roman;
];


[ ZIPI_RunMenu _m   i j count cur key target redibujar;

	redibujar = 1;

	cur = 0;
	count = _m.#ZIPI_item / 2;

	for(::) {
		if (redibujar) {
			ZIPI_PintaTitulo(_m.ZIPI_titulo);
			redibujar = 0;
		}

		for(i = 0: i < count: i++) {
			j = i + 3;
			@set_cursor j 5;
			print (string)(_m.&ZIPI_item-->i).ZIPI_titulo;
		}
		j = cur + 3;
		@set_cursor j 2;
		print ">";
		@set_cursor j 2;
		@read_char 1 -> key;
		print " ";
		switch(key) {
			'k', 'p', '-', '_', 129:
				cur--;
				if (cur < 0) cur = count-1;
				break;
			'j', 'n', '=', '+', 130:
				cur++;
				if (cur >= count) cur = 0;
				break;
			'q', 'Q', 27, 131, 10, 8:
				return;

			132, 13, 'n', ' ':
				target = _m.&ZIPI_item-->cur;
				if (target ofclass ZIPI_Menu)
					ZIPI_RunMenu(target);
				else if (target ofclass ZIPI_Pista)
					ZIPI_RunPista(target);
				else
					ZIPI_RunOtro(target);

				redibujar = 1;
				break;
		}
	}
];

[ ZIPI_RunPista _h   count cur key done;
    
    count = _h.#ZIPI_pistas / 2;
    cur = 0;
    done = 0;
    
    ZIPI_PintaTitulo(_h.ZIPI_titulo);
    
    @set_window 0;
    print "^[Pulsa 'P' para una pista (", count, " en total)";
    print ", o 'Q' para parar]^^";
    
    do {
	@read_char 1 -> key;
	switch(key) {
	 'p', 'P':
	    cur++;
	    print "(", cur, "/", count, ") ",
		(string)_h.&ZIPI_pistas-->(cur-1), "^^";
	    break;
	 'q', 'Q', 27, 131, 10, 8:
	    return;
	}
	
    } until(cur >= count);
    ZIPI_Espera();
    
];

[ ZIPI_RunOtro _o;
    ZIPI_PintaTitulo(_o.ZIPI_titulo);
    @set_window 0;
    print "^";
    _o.ZIPI_ejecutar();
    ZIPI_Espera();
];

[ ZIPI_Center s    len wid off;
	wid = 0->33;
	if (wid == 0) wid = 80;
	off = (wid - len) / 2;
	spaces(off);
	print (string)s, "^";
];


! Tomada de eparserm.h, libreria InformatE
[ ZIPI_IntentarNumero i j c num len mul tot d digit;

   i=1*4+1; j=ZIPI_parse->i; num=j+ZIPI_buffer; len=ZIPI_parse->(i-1);

   if (len>=4) mul=1000;
   if (len==3) mul=100;
   if (len==2) mul=10;
   if (len==1) mul=1;

   tot=0; c=0; len=len-1;

   for (c=0:c<=len:c++)
   {   digit=num->c;
       if (digit=='0') { d=0; jump digok; }
       if (digit=='1') { d=1; jump digok; }
       if (digit=='2') { d=2; jump digok; }
       if (digit=='3') { d=3; jump digok; }
       if (digit=='4') { d=4; jump digok; }
       if (digit=='5') { d=5; jump digok; }
       if (digit=='6') { d=6; jump digok; }
       if (digit=='7') { d=7; jump digok; }
       if (digit=='8') { d=8; jump digok; }
       if (digit=='9') { d=9; jump digok; }
       return -1000;
     .digok;
       tot=tot+mul*d; mul=mul/10;
   }
   if (len>3) tot=10000;
   return tot;
];

! Menu en modo texto, para usuarios con terminales pequeñitas
! como la de la Palm Pilot
[ ZIPI_RunMenuT _m cur count i j target;

    cur = 0;
    count = _m.#ZIPI_item / 2;
    
    for(::) {
	@erase_window -1;
	style bold;
	print (string) _m.ZIPI_titulo, "^^";
     	style roman;
	for(i = 0: i < count: i++) {
	    print i+1, ": ", (string)(_m.&ZIPI_item-->i).ZIPI_titulo, "^";
	}
	print "^Elige opcion (0=salir) > ";
	read ZIPI_buffer ZIPI_parse;
	j=ZIPI_IntentarNumero();
	if (j==-1000) 
	{
	    print "Debes escribir un numero^";
	    ZIPI_Espera();
	}
	else if (j>count)
	{
	    print "El numero va de 1 a ", count, " (0=salir)";
	    ZIPI_Espera();
	}
	else 
	{
	    if (j==0) return;
	    target = _m.&ZIPI_item-->(j-1);
	    if (target ofclass ZIPI_Menu)
		ZIPI_RunMenuT(target);
	    else if (target ofclass ZIPI_Pista)
		ZIPI_RunPistaT(target);
	    else
		ZIPI_RunOtroT(target);
	}
    }
];

[ ZIPI_RunPistaT _h   count cur key done;

    count = _h.#ZIPI_pistas / 2;
    cur = 0;
    done = 0;
    
    @erase_window -1;
    style bold;
    print (string) _h.ZIPI_titulo, "^^";
    style roman;
    
    print "^[Pulsa 'P' para una pista (", count, " en total)";
    print ", o 'Q' o '0' para parar]^^";
    
    do {
	@read_char 1 -> key;
	switch(key) {
	 'p', 'P':
	    cur++;
	    print "(", cur, "/", count, ") ",
		(string)_h.&ZIPI_pistas-->(cur-1), "^^";
	    break;
	 'q', 'Q', 27, 131, 10, 8, '0':
	    return;
	}
	
    } until(cur >= count);
    ZIPI_Espera();
];

[ ZIPI_RunOtroT _o;
    style bold;
    print (string) _o.ZIPI_titulo;
    style roman;
    print "^";
    _o.ZIPI_ejecutar();
    ZIPI_Espera();
];
